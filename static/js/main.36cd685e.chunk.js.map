{"version":3,"sources":["serviceWorker.ts","reducers/todolistReducer.ts","reducers/taskReducer.ts","reducers/store.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","TodoList.tsx","components/Header.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","todolistID1","v1","todolistID2","initialState","id","title","filter","changeFilterAC","todolistID","type","payload","isDone","rootReducer","combineReducers","tasks","action","newTask","t","taskId","map","todolists","newTodolist","store","createStore","AddItemForm","props","useState","newTaskTitle","setNewTaskTitle","TextField","onChange","e","currentTarget","value","onKeyDown","ctrlKey","key","callback","label","variant","color","size","Button","onClick","taskTitle","trim","alert","style","marginLeft","minWidth","maxWidth","EditableSpan","editMode","setEditMode","setTitle","error","setError","onBlur","length","autoFocus","helperText","onDoubleClick","className","TodoList","dispatch","useDispatch","useSelector","state","allBtnVariant","activeBtnVariant","completedBtnVariant","tasksForTodoList","changeTitleAC","IconButton","aria-label","Delete","addTaskAC","taskClasses","Checkbox","checked","icon","checkedIcon","changeNameAC","fontSize","marginRight","Header","AppBar","position","Toolbar","edge","Typography","App","Container","fixed","Grid","container","padding","addTodolistAC","spacing","el","item","Paper","minHeight","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.36cd685e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FiltersType, TodolistsType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\n\r\nexport let todolistID1 = v1();\r\nexport let todolistID2 = v1();\r\n\r\nlet initialState: Array<TodolistsType> = [\r\n    {id: todolistID1, title: 'What to learn', filter: 'all'},\r\n    {id: todolistID2, title: 'What to buy', filter: 'all'},\r\n]\r\n\r\n\r\nexport const todolistReducer = (todolists: Array<TodolistsType> =initialState, action: tsarType):Array<TodolistsType> => {\r\n    switch (action.type) {\r\n        case \"ADD-TODOLIST\": {\r\n            const newTodolist: TodolistsType = {\r\n                id: action.payload.todolistID,\r\n                title: action.payload.title,\r\n                filter: \"all\"\r\n            }\r\n            return [newTodolist, ...todolists]\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            return todolists.filter(t => t.id !== action.payload.todolistID)\r\n        }\r\n        case \"CHANGE-TITLE\": {\r\n            return todolists.map(t=>t.id===action.payload.todolistID ? {...t, title:action.payload.title} : t)\r\n        }\r\n        case \"CHANGE-FILTER\": {\r\n            return todolists.map(t => t.id === action.payload.todolistID ? {...t, filter: action.payload.filter} : t)\r\n        }\r\n        default:\r\n            return todolists\r\n    }\r\n}\r\n\r\ntype tsarType = addTodolistACType | removeTodolistACType | changeFilterACType\r\n    | changeTitleACType\r\n\r\n\r\nexport type addTodolistACType = ReturnType<typeof addTodolistAC>\r\nexport const addTodolistAC = (todolistID: string, title: string) => {\r\n    return {\r\n        type: \"ADD-TODOLIST\",\r\n        payload: {\r\n            todolistID,\r\n            title,\r\n        }\r\n    } as const\r\n}\r\n\r\nexport type removeTodolistACType = ReturnType<typeof removeTodolistAC>\r\nexport const removeTodolistAC = (todolistID: string) => {\r\n    return {\r\n        type: \"REMOVE-TODOLIST\",\r\n        payload: {\r\n            todolistID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype changeFilterACType = ReturnType<typeof changeFilterAC>\r\nexport const changeFilterAC = (todolistID: string, filter: FiltersType) => {\r\n    return {\r\n        type: \"CHANGE-FILTER\",\r\n        payload: {\r\n            todolistID,\r\n            filter,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype changeTitleACType = ReturnType<typeof changeTitleAC>\r\nexport const changeTitleAC = (todolistID: string, title: string) => {\r\n    return {\r\n        type: \"CHANGE-TITLE\",\r\n        payload: {\r\n            todolistID,\r\n            title,\r\n        }\r\n    } as const\r\n}","import {v1} from \"uuid\";\r\nimport {addTodolistACType, removeTodolistACType, todolistID1, todolistID2} from \"./todolistReducer\";\r\nimport {TaskType} from \"../App\";\r\n\r\nlet initialState = {\r\n    [todolistID1]: [\r\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\r\n        {id: v1(), title: \"JS\", isDone: true},\r\n        {id: v1(), title: \"ReactJS\", isDone: false},\r\n        {id: v1(), title: \"Rest API\", isDone: false},\r\n        {id: v1(), title: \"GraphQL\", isDone: false},\r\n    ],\r\n    [todolistID2]: [\r\n        {id: v1(), title: \"Milk\", isDone: true},\r\n        {id: v1(), title: \"Potato\", isDone: true},\r\n        {id: v1(), title: \"Tomatoes\", isDone: false},\r\n        {id: v1(), title: \"Fish\", isDone: false},\r\n        {id: v1(), title: \"Fruits\", isDone: false},\r\n    ]\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const taskReducer = (tasks: InitialStateType = initialState, action: tsarType):InitialStateType => {\r\n    switch (action.type) {\r\n        case \"ADD-TASK\": {\r\n            let newTask: TaskType = {id: v1(), title: action.payload.title, isDone: false}\r\n            return {...tasks, [action.payload.todolistID]: [newTask, ...tasks[action.payload.todolistID]]}\r\n\r\n        }\r\n        case \"REMOVE-TASK\": {\r\n\r\n            return {\r\n                ...tasks,\r\n                [action.payload.todolistID]: tasks[action.payload.todolistID].filter(t => t.id !== action.payload.taskId)\r\n            }\r\n        }\r\n        case \"CHANGE-STATUS\": {\r\n            return {\r\n                ...tasks,\r\n                [action.payload.todolistID]: tasks[action.payload.todolistID].map(t => t.id === action.payload.taskId ? {\r\n                    ...t,\r\n                    isDone: action.payload.isDone\r\n                } : t)\r\n            }\r\n        }\r\n        case \"CHANGE-NAME\": {\r\n            return {\r\n                ...tasks,\r\n                [action.payload.todolistID]: tasks[action.payload.todolistID].map(t => t.id === action.payload.taskId ? {\r\n                    ...t,\r\n                    title: action.payload.title\r\n                } : t)\r\n            }\r\n        }\r\n        case \"ADD-TODOLIST\": {\r\n            return {\r\n                ...tasks, [action.payload.todolistID]: [\r\n                    {id: v1(), title: \"new Task\", isDone: false},\r\n                    {id: v1(), title: \"new Task\", isDone: false},\r\n                    {id: v1(), title: \"new Task\", isDone: false},\r\n                ]\r\n            }\r\n        }\r\n        case \"REMOVE-TODOLIST\": {\r\n            delete tasks[action.payload.todolistID]\r\n            return tasks\r\n        }\r\n        default:\r\n            return tasks\r\n    }\r\n}\r\n\r\ntype tsarType =\r\n    addTaskACType\r\n    | removeTaskACType\r\n    | changeStatusACType\r\n    | changeNameACType\r\n    | addTodolistACType\r\n    | removeTodolistACType\r\n\r\ntype addTaskACType = ReturnType<typeof addTaskAC>\r\n\r\nexport const addTaskAC = (todolistID: string, title: string) => {\r\n    return {\r\n        type: \"ADD-TASK\",\r\n        payload: {\r\n            title,\r\n            todolistID,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>\r\n\r\nexport const removeTaskAC = (todolistID: string, taskId: string) => {\r\n    return {\r\n        type: \"REMOVE-TASK\",\r\n        payload: {\r\n            todolistID,\r\n            taskId,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype changeStatusACType = ReturnType<typeof changeStatusAC>\r\n\r\nexport const changeStatusAC = (todolistID: string, taskId: string, isDone: boolean) => {\r\n    return {\r\n        type: \"CHANGE-STATUS\",\r\n        payload: {\r\n            todolistID,\r\n            taskId,\r\n            isDone,\r\n        }\r\n    } as const\r\n}\r\n\r\ntype changeNameACType = ReturnType<typeof changeNameAC>\r\n\r\nexport const changeNameAC = (todolistID: string, taskId: string, title: string) => {\r\n    return {\r\n        type: \"CHANGE-NAME\",\r\n        payload: {\r\n            todolistID,\r\n            taskId,\r\n            title,\r\n        }\r\n    } as const\r\n}","import {taskReducer} from \"./taskReducer\";\r\nimport {todolistReducer} from \"./todolistReducer\";\r\nimport {combineReducers, createStore} from \"redux\";\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolists:todolistReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer)\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {Button, TextField} from \"@mui/material\";\r\nimport AddIcon from '@mui/icons-material/Add';\r\n\r\n\r\ntype AddItemFormPropsType = {\r\n    callback: (title: string) => void\r\n    title: string\r\n}\r\n\r\nconst AddItemForm = (props: AddItemFormPropsType) => {\r\n    const [newTaskTitle, setNewTaskTitle] = useState(props.title)\r\n\r\n    function onNewTitleChangeHandler(e: ChangeEvent<HTMLInputElement>) {\r\n        setNewTaskTitle(e.currentTarget.value)\r\n    }\r\n\r\n    function onKeyDownHandler(e: KeyboardEvent<HTMLInputElement>) {\r\n        if (e.ctrlKey && e.key === 'Enter') {\r\n            props.callback(newTaskTitle)\r\n            setNewTaskTitle('')\r\n        }\r\n    }\r\n\r\n    function addTask() {\r\n        const taskTitle = newTaskTitle.trim()\r\n        if (taskTitle) {\r\n            props.callback(taskTitle)\r\n        } else {\r\n            alert(\"Value must be added\")\r\n        }\r\n        setNewTaskTitle(\"\")\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <TextField onChange={onNewTitleChangeHandler}\r\n                       onKeyDown={onKeyDownHandler}\r\n                       value={newTaskTitle}\r\n                       label=\"New task\"\r\n                       variant=\"outlined\"\r\n                       color=\"primary\"\r\n                       size=\"small\"/>\r\n            <Button variant=\"contained\"\r\n                // size=\"small\"\r\n                    onClick={addTask}\r\n                    style={{marginLeft: \"10px\", minWidth: '30px', maxWidth: '40px'}}><AddIcon color=\"inherit\"/></Button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddItemForm;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callback: (title: string) => void\r\n    className?: string\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [title, setTitle] = useState(props.title)\r\n    let [error, setError] = useState(false)\r\n\r\n    const setInputMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n\r\n    const setSpanMode = () => setEditMode(false)\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setError(false)\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const changeTaskName = () => {\r\n        setSpanMode()\r\n        if (title.length > 0) {\r\n            props.callback(title)\r\n        } else {\r\n            setError(true)\r\n        }\r\n    }\r\n    const enterHandler = (e: KeyboardEvent<HTMLDivElement>) => {\r\n        if (e.key === \"Enter\") {\r\n            if (title.length > 0) {\r\n                props.callback(title)\r\n            } else {\r\n                setError(true)\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        editMode\r\n            ? <TextField value={title}\r\n                         onBlur={changeTaskName}\r\n                         onChange={onChangeHandler}\r\n                         autoFocus\r\n                         size=\"small\"\r\n                         onKeyDown={enterHandler}\r\n                         error={error}\r\n                         helperText={error?\"Please type task\":\"\"}\r\n                        style={{maxWidth:\"60%\"}}/>\r\n            : <span onDoubleClick={setInputMode}\r\n                    className={props.className}>{props.title}</span>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {FiltersType, TasksType, TaskType} from \"./App\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {EditableSpan} from \"./components/EditableSpan\";\r\nimport {AppBar, Button, Checkbox, IconButton} from \"@mui/material\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport CropSquareIcon from '@mui/icons-material/CropSquare';\r\nimport DoneIcon from '@mui/icons-material/Done';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./reducers/store\";\r\nimport {changeFilterAC, changeTitleAC, removeTodolistAC} from \"./reducers/todolistReducer\";\r\nimport {addTaskAC, changeNameAC, changeStatusAC, removeTaskAC} from \"./reducers/taskReducer\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    filter: FiltersType\r\n    todolistID: string\r\n    className?:string\r\n}\r\n\r\nconst TodoList = (props: PropsType) => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, Array<TaskType>>(state=>state.tasks[props.todolistID])\r\n\r\n    function changeFilterAll() {\r\n       dispatch(changeFilterAC(props.todolistID, \"all\"))\r\n    }\r\n\r\n    function changeFilterActive() {\r\n        dispatch(changeFilterAC(props.todolistID, \"active\"))\r\n    }\r\n\r\n    function changeFilterCompleted() {\r\n        dispatch(changeFilterAC(props.todolistID, \"completed\"))\r\n    }\r\n\r\n    const allBtnVariant = (props.filter === \"all\") ? \"contained\" : \"outlined\";\r\n    const activeBtnVariant = (props.filter === \"active\") ? \"contained\" : \"outlined\";\r\n    const completedBtnVariant = (props.filter === \"completed\") ? \"contained\" : \"outlined\";\r\n\r\n    const addNewTaskHandler = (title: string) => {\r\n        dispatch(addTaskAC(props.todolistID, title))\r\n    }\r\n\r\n    const newTodoListTitleChanger = (title: string) => {\r\n        dispatch(changeTitleAC(props.todolistID, title))\r\n    }\r\n\r\n    const removeTodolistHandler = () => {\r\n        dispatch(removeTodolistAC(props.todolistID))\r\n    }\r\n\r\n    let tasksForTodoList = tasks\r\n    if (props.filter === 'completed') {\r\n        tasksForTodoList = tasks.filter(t => t.isDone)\r\n    }\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodoList = tasks.filter(t => !t.isDone)\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            <h3>\r\n                <EditableSpan title={props.title} callback={newTodoListTitleChanger} className=\"title\"/>\r\n                <IconButton  aria-label=\"delete\" onClick={removeTodolistHandler}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addNewTaskHandler} title=\"\"/>\r\n            <ul className=\"list\">\r\n                {\r\n\r\n                    tasksForTodoList.map(t => {\r\n                        const removeTask = () => dispatch(removeTaskAC(props.todolistID, t.id))\r\n                        const taskClasses = t.isDone ? \"is-done\" : \"\";\r\n                        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => dispatch(changeStatusAC(props.todolistID, t.id, e.currentTarget.checked))\r\n                        const changeTaskName = (title: string) => dispatch(changeNameAC(props.todolistID, t.id, title))\r\n\r\n                        return <li key={t.id}>\r\n                            <Checkbox   onChange={changeStatus}\r\n                                        checked={t.isDone}\r\n                                        icon={<CropSquareIcon />}\r\n                                        checkedIcon={<DoneIcon />}/>\r\n                            <EditableSpan title={t.title} callback={changeTaskName} className={taskClasses}/>\r\n\r\n                            <IconButton onClick={removeTask} aria-label=\"delete\">\r\n                                <Delete fontSize=\"small\"/>\r\n                            </IconButton>\r\n                        </li>\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <Button style={{marginRight:\"5px\"}} color='primary' variant={allBtnVariant}  onClick={changeFilterAll}>All</Button>\r\n                <Button style={{marginRight:\"5px\"}} color=\"secondary\" variant={activeBtnVariant}  onClick={changeFilterActive}>Active</Button>\r\n                <Button color=\"success\" variant={completedBtnVariant} onClick={changeFilterCompleted}>Completed</Button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\r\nimport {AppBar, Button, IconButton, Toolbar, Typography} from \"@mui/material\";\r\nimport MenuIcon from \"@mui/icons-material/Menu\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <IconButton\r\n                    edge=\"start\"\r\n                    color=\"inherit\"\r\n                    aria-label=\"menu\"\r\n                >\r\n                    <MenuIcon />\r\n                </IconButton>\r\n                <Typography variant=\"h6\"  >\r\n                    Todolist\r\n                </Typography>\r\n                <Button color=\"inherit\">Login</Button>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};\r\n\r\nexport default Header;","import React  from 'react';\r\nimport './App.css';\r\nimport TodoList from \"./TodoList\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./components/AddItemForm\";\r\nimport {\r\n    addTodolistAC,\r\n} from \"./reducers/todolistReducer\";\r\nimport Header from \"./components/Header\";\r\nimport {Container, Grid, Paper} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./reducers/store\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\nexport type FiltersType = \"all\" | \"completed\" | \"active\"\r\n\r\nexport type TodolistsType = {\r\n    id: string\r\n    title: string\r\n    filter: FiltersType\r\n}\r\n\r\nexport type TasksType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistsType>>(state => state.todolists)\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector<AppRootStateType, TasksType>(state=>state.tasks)\r\n\r\n    const AddNewTodoList = (title: string) => {\r\n        const action = addTodolistAC(v1(),title)\r\n        dispatch(action)\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Header/>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"10px\"}}>\r\n                    <AddItemForm callback={AddNewTodoList} title=\"\"/>\r\n                </Grid>\r\n                <Grid container spacing={6}>\r\n                    {\r\n                        todolists.map((el) => {\r\n\r\n                            return <Grid item key={el.id}>\r\n                                <Paper style={{padding: \"10px\", minHeight: \"400px\"}}>\r\n                                    <TodoList\r\n                                        todolistID={el.id}\r\n                                        title={el.title}\r\n                                        filter={el.filter}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./reducers/store\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    ,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}